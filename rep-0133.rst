REP: 133
Title: ROS distribution files
Author: Tully Foote, Dirk Thomas, Paul Mathieu
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 04-Feb-2013

.. contents::

Abstract
========
This REP defines and describes the set of ROS distribution files needed to
maintain consistency among a ROS distribution and facilitate the build process.
This is required by the Bloom release process, as well as the build process on a
Jenkins build farm.

Motivation
==========
Rosdistro release files have been used by different tools to provide a
centralized list of packages that a ROS distribution contains and maintains.
These files take the form of YAML files and are easily readable and editable.
However, no formal description of the syntax of these files was given so far.

The Rosdistro release files will serve several purposes:

 * describe each ROS distribution and provide all necessary information to
   reconstruct a whole distribution from scratch
 * provide build information to be used by automated build processes,
   independently of the build process being used
 * ease offline/experimental builds by using a simple file structure and easily
   editable files

File Format
===========
This REP describes two files:

 * the main file listing all ROS distribution releases
 * individual distribution files listing packages

Both of these files use the YAML syntax and have the .yaml extension.
Indentation is two spaces per indentation level.

rosdistros.yaml
---------------
This is the 'master' file containing a list of all the available ROS
distributions, along with links pointing to specific distribution files.

Example:

::

  groovy:
    release: releases/groovy.yaml
    devel: releases/groovy-devel.yaml
    doc: doc/groovy
  hydro:
    release: releases/hydro.yaml
    devel: releases/hydro-devel.yaml
    doc: doc/hydro


distibution file
----------------
Each yaml file referenced in the rosdistros.yaml file is called a distribution
file. It contains a list of all the packages that are included in the ROS
software distribution along with their version and the release repository from
which they shall be fetched, as well as a list of supported target
architectures/linux distributions.

 * gbp-repos: ???
 * release-name: the name of the ROS distribution to build
 * targets: a list of target platforms for which to build
   This is currently a list of ubuntu/debian distributions, but will most likely
   be extended into a list of paltforms.
   Each platform can have different CPU architectures for which to build
 * repositories: the contents of the distribution. A list of repositories that
   contain packages.
    * url: the git URL to to the repository base
    * version: the version of the repository
    * packages: an optional list of packages (if the repository has more than one)


Example:

::

  gbp-repos: {You must update to a newer rosdep version by calling..sudo apt-get
  update && sudo apt-get install python-rosdep (make sure to uninstall the pip
  version on Ubuntu):}

  release-name: groovy

  targets:
    oneiric: &pc ['amd64', 'i386']
    precise: ['amd64', 'i386', 'armel']
    quantal: *pc
    wheezy: ['armhf']

  repositories:
    actionlib:
      url: git://github.com/ros-gbp/actionlib-release.git
      version: 1.9.11-0
    ar_track_alvar:
      url: https://github.com/ros-gbp/ar_track_alvar-release.git
      version: 0.3.0-0
    bond_core:
      url: git://github.com/ros-gbp/bond_core-release.git
      version: 1.7.10-0
      packages:
          bond:
          bond_core:
          bondcpp:
          bondpy:
          smclib:


Resources
=========

References
==========
.. [1] (very good reference here)
   (http://a.reference.here/would/be/cool.html)

Copyright
=========
This document has been placed in the public domain.
