REP: 3
Title: Target Platforms
Author: Tully Foote <tfoote@willowgarage.com>, Ken Conley <kwc@willowgarage.com>
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 21-Sep-2010
Post-History: 21-Sep-2010, 17-Jan-2011


Abstract
========

This REP defines target platforms for each ROS Distribution Release.
We define platforms to include both operating system releases (Ubuntu
Lucid) as well as major language releases (e.g. Python 2.6). The
target platforms represent the set on which all core stacks are
expected to work. Exceptions can be made for stacks that are
intentionally platform-specific.

Platforms by Distribution
=========================

If planned support for a target platform is changed, notice will be
sent to ros-developers to enable discussion of this issue.

Box Turtle (Feb 2010)
---------------------
- Ubuntu Hardy
- Ubuntu Intrepid
- Ubuntu Jaunty
- Ubuntu Karmic
- C++03
- Boost 1.37
- Lisp SBCL 1.0.38
- Python 2.5

C Turtle (Aug 2010)
-------------------
- Ubuntu Jaunty
- Ubuntu Karmic
- Ubuntu Lucid
- Ubuntu Maverick
- C++03
- Boost 1.37
- Lisp SBCL 1.0.38
- Python 2.5

Diamondback (Feb 2011)
----------------------
- Ubuntu Lucid
- Ubuntu Maverick
- Ubuntu Natty
- C++03
- Boost 1.40
- Lisp SBCL 1.0.38
- Python 2.6

Electric Emys (Aug 2011)
------------------------
- Ubuntu Lucid
- Ubuntu Maverick
- Ubuntu Natty
- Ubuntu Oneiric
- C++03
- Boost 1.40
- Lisp SBCL 1.0.x
- Python 2.6

Fuerte Turtle (Mar 2012)
------------------------
- Ubuntu Lucid
- Ubuntu Oneiric
- Ubuntu Precise
- C++03
- Boost 1.40
- Lisp SBCL 1.0.x
- Python 2.6

Groovy Galapagos (Oct 2012)
---------------------------
- Ubuntu Oneiric
- Ubuntu Precise
- Ubuntu Quantal
- C++03
- Boost 1.46
- Lisp SBCL 1.0.x
- Python 2.7
- CMake 2.8.3

Motivation
==========

This document is provided to help plan future development for
libraries. The primary platforms for ROS are Canonical's Ubuntu
releases, and our intent is to track these releases as best as
possible while also allowing for current, thirdparty libraries to be
used.

Rationale
=========

Target platforms for future releases are speculative and are based on
consulting Ubuntu's release and end-of-life schedule [1]_. 

The approximate formula for choosing target platforms is:

1st after LTS, e.g. C Turtle:
    LTS +/- 1

2nd after LTS, e.g. Diamondback:
    LTS +2

3rd after LTS, e.g. Electric:
    LTS +3

4th after LTS, 1st before next LTS:
    Rebase: target platforms selected to enable migration to next LTS

Any "formula" requires making assumptions about future Ubuntu library
choices and other crystal-ball projections. While we will do our best
to follow the assumed target schedule, we reserve the right to change
support targets based on Ubuntu library choices or other
considerations. For example, the formula above assumes that a ROS
distribution release can be made compatible with *future* Ubuntu
releases. In the event that forward integration cannot be done without
introducing destabilizing changes, preference will always be given to
maintaining stability of the existing release.

We generally expect to use the ROS Distribution release prior to an
Ubuntu LTS release to transition to newer libraries and drop support
for older platforms. Our past experience with Ubuntu releases is that
the release prior to an LTS release (e.g. Karmic) incorporates major
jumps in library versions; also, this release is generally very
similar to the LTS release. Requiring that all stacks be compatible
across a wide spread of Ubuntu releases can be very difficult,
especially for libraries like Boost that do not provide for backwards
compatibility.

C++
---

We use the C++03 (ISO/IEC 14882:2003) standard, and are compiler-agnostic.  
While we mainly develop with gcc, no use of compiler-specific features is allowed
without proper use of macros to allow use on other platforms.

Use of C++[0|1]x or tr1 features are only allowed if support for that feature is checked
at compile time, and equivalent functionality exists without requiring C++[0|1]x
code.  A wholesale jump to C++[0|1]x will not happen until all commonly used 
OS platforms fully support it.

For a given release we allow use of Boost libraries that match the version provided in our 
low-water-mark Ubuntu version.

Lisp
----

We use Steel Bank Common Lisp as our ANSI Common Lisp
implementation. We are currently tracking SBCL 1.0.38 and will track
future updates in the 1.0.x series as appropriate.

Python
------

Our intent with Python support is to track the minimum Python version
provided in the supported Ubuntu platforms, as well as survey other
commonly used OS platforms that support ROS to determine a reasonable
minimum target. There is currently no plan to jump to Python 3k,
though will accept patches that provide dual compatibility with Python
2.x and Python 3k.

Core Stacks
===========

Core stacks are required to comply with the target platforms listed
here, though exceptions can be granted for core stacks that are
inherently platform-specific.  The set of core stacks is currently
defined by variants included with each ROS distribution release.

C Turtle
--------

This REP applies to stacks in the `base` variant for C Turtle.

Diamondback
-----------

This REP applies to stacks in the `desktop-extras` variant [2]_ for Diamondback.

Non-core Stacks
===============

    And thirdly, the code is more what you'd call "guidelines" than actual rules...

We hope that ROS stack maintainers will make every effort to comply
with the target platforms within this REP, but we recognize that ROS
stacks represent a spectrum of development, from research prototypes
to hardened libraries.  There are also cases where supporting target
platforms may incur unnecessary effort, such as a set of drivers for a
specific robot platform.

References and Footnotes
========================

.. [1] Ubuntu Releases with End-of-Life Dates
   (https://wiki.ubuntu.com/Releases)
   
.. [2] REP 108, ROS Diamondback Variants
   (http://www.ros.org/reps/rep-0108.html)

Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:

