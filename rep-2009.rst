REP: 2009
Title: Type Negotiation Feature
Author: Audrow Nash <audrow@openrobotics.org>, Chris Lalancette <clalancette@openrobotics.org>, Gonzalo de Pedro <gonzalodepedro@ekumenlabs.com>, William Woodall <william@openrobotics.org>
Status: Accepted
Type: Standards Track
Content-Type: text/x-rst
Created: 04-Nov-2021
Post-History:

Abstract
========

This REP proposes an extension to ROS 2 Lifecycle Nodes that will make it possible to negotiate the message types used by publishers and subscribers.


Motivation
==========

The primary reason for this change is to allow nodes to publish different types of messages that better allow the system to optimize its behavior.
For example, a publisher or subscriber may be more efficient with one image format (say, YUV420) than another (say, ARGB888).
What's more, the optimal message type to publish may change over time, if say, a different part of the ROS 2 network becomes active to accomplish a different task.
Perhaps the node with the original subscriber is no longer needed so the node goes into an idle mode, and another node with a different subscriber would prefer images in ARGB888, over YUV420, for resource reasons.
Currently, this behavior could be accomplished with ROS 2 nodes or lifecycle nodes, however doing so would require a significant amount of work for the programmer and are potential sources of errors.

A second reason for this change is that it can improve developer experience by giving the developer more flexibility in how they interface with different nodes.
The result of which is that they may need to spend less time writing code to convert a message type into the one message type accepted by the node they're using; instead the node may support additional types, so they may not need to perform any conversion.
This may reduce the number of errors in the user's code, as well as it may allow them to prototype more efficiently, as they may not have to write as much code to perform conversions.

The final reason for this change is that it will enable vendors of hardware accelerators to provide the most efficient operations.
That is, it may be the case that a node can do hardware-accelerated operations on a YUV420 image, but (slower) CPU conversions on a ARGB8888 image.
In that case, the hardware vendor's node would mark a preference on YUV420 since that uses the hardware more efficiently.


Terminology
===========

:Regular Publisher:
  A publisher that publishes a single message type on a single topic.

:Regular Subscriber:
  A subscriber that subscribes to a single message type on a single topic.

:Supported Message Type:
  A message type that can be selected for use during negotiation.

:Selected Message Type:
  A supported type that has been selected for use during negotiation.

:Negotiating Publisher:
  A publisher with preferences as to which supported message type it prefers to publish.
  It can publish one or more selected message types, on the same number of topics.

:Negotiating Subscriber:
  A subscriber with preferences as to which supported message type it prefers to subscribe to.
  It subscribes to a single selected message type on a single topic.

:Negotiating Publisher and Subscriber Pair:
  A pair of negotiating publishers and subscribers that are related to each other in that the subscribers preferences may be based on the selected message type of the publisher.
  An example would be if the subscriber receives data, modifies it, and then publishes it.
  In this case, it is desirable to have the publisher and subscriber use the same selected message type.
  However, the selected message type may not be known before the publisher negotiates it.

Specification
=============

High-level Goals
----------------

The proposed change has a few goals:

- Provide a way for nodes to publish different types of messages.
- Support publishing in multiple formats at the same time.
- Only necessary publishers and subscribers are active at any given time.
- A publisher or subscriber can delay stating its preferences to wait for additional information.
- Core functions used for decision making are exposed to the user, namely the ability to choose how preferences are prioritized and the ability to delay stating preferences.


Defining Supported Message Types
--------------------------------

For each supported message type, the following information must be known:

- The topic that the supported message type should be published on.
- The message type that will be sent (either a ROS 2 message type, such as  ``sensor_msgs::msg::Image``, or a custom data type).
- The relative priority of the supported message type.

The message type is important because multiple message types may be sent with the same ROS 2 message type.
For example, a publisher may publish image data in the format of YUV420 or ARGB8888, both of which could be sent in a ``sensor_msgs::msg::Image``.

Once there is a set of supported message types, publishers and subscribers can negotiate which type they prefer.



In order to have publishers and subscribers negotiate which ROS message type is sent, the user must

- specify the supported message types and,
- provide a prioritization of the supported message types.

This is in addition to the standard arguments required for a publisher or subscriber, such as topic, quality of service, and queue size.
Each supported message type will also need an associated callback, which tells the program how to send or receive supported message types.

The way of prioritizing the various message types can come in two forms:

- A list where message types are ordered by preference.
- A dictionary for nodes with both publishers and subscribers that want to delay publishing their subscribers preferences until their publisher has resolved its message type. This dictionary can be thought of as a list of preferences, where the list chosen depends on the publisher's message type.

Negotiation Algorithm
---------------------

In negotiating preferences, it has been decided that publishers make the ultimate decision of what type to send (this design choice is discussed in more detail in the "Rationale" section).
To accomplish this, a publisher seeks to know the supported types and preferences of each subscriber that receives messages from it.
After receiving all of the subscribers supported types and preferences, the publisher considers all of the supported types and preferences, including its own supported types and preferences.
The first step in the negotiation is to compare the supported types available.
Specifically, we are looking to see what types are supported for all of the subscribers.
In the case that no single format can be accepted by all subscribers, more than one message type will have to be published.
If this occurs, a warning will be made visible to the user, as it may be undesirable to have such a large memory footprint.
In either case, a minimal set of supported types will be obtained.

After identifying a minimal set of supported message types, the priorities of each type for each subscriber and the publisher will considered.
If there is a tie in priority for two supported types, the publisher will use its preferences to break the tie.

Once the message types have been prioritized the publisher(s) will be created.
In the case that one message type doesn't satisfy the supported types for all of the subscribers, additional publishers will be created.

It is also possible that the graph of active nodes changes during runtime.
If this occurs, the publishers and subscribers will renegotiate their types, if anything has changed for them.

A high-level view of this algorithm can be seen below.

.. code-block:: python

    # Gather supported types and preferences
    supported_types = get_supported_types([pub, sub_1, sub_2, ..., sub_m])
    preferences = get_preferences([pub, sub_1, sub_2, ..., sub_m])

    # Find common message types that are supported by the publisher and subscribers
    common_supported_types = find_common_supported_types(supported_types)

    # Prioritize the common message types
    selected_message_types = prioritize_types(common_supported_types, preferences)

    # Let the subscribers know what message type will be used
    send_selected_message_type_back_to_subscribers(selected_message_types)
    # Create publishers now that the message type has been negotiated.
    create_negotiated_publishers(topic, selected_message_types)


Negotiation Examples
--------------------

Using the following notation, let ``N_n(T_1, T_2, ..., T_m)`` be node ``n``, where ``n`` is a positive integer, and let the arguments in parentheses, ``T_1, T_2, ..., T_m``, be the supported message types.
Note that there can be ``m`` supported types for each node, where ``m`` is a positive integer.
For convenience, let's also assume that the supported types are prioritized in their respective order, such that the priority of ``T_1`` is the highest, ``T_2`` is the second highest, and so on.

Using the node notation described above, we can then use the following notation to describe the agreed upon message type between multiple nodes.
In the example below, node ``1`` (``N_1``) supports only type ``x``, and node ``2`` (``N_2``) supports types ``x`` and ``y``.
In this case, the agreed upon message type is ``x``, as shown by the ``x`` over the arrow pointing from node ``1`` to node ``2``.
More practically, ``N_1`` is publishing ``x``, and ``N_2`` is subscribing to a topic with message type``x``.

.. code-block::

            x
   N_1(x) ----> N_2(x, y)

In some examples below we will reason about which message type should be chosen.
In such cases, ``??`` will be used to denote that we are not sure of the message type just yet.

Simple examples
^^^^^^^^^^^^^^^

We can now use this notation to reason about the agreed upon message type in several different scenarios.
There are several cases that are clear.

.. code-block::

   (1a)
                    y
           N_1(y) ----> N_2(x, y)

   (1b)
                    x
        N_1(x, y) ----> N_2(x)

   (1c)
                    y
        N_1(x, y) ----> N_2(y)

   (1d)
                    x
     N_1(x, y, z) ----> N_2(x, a, b)

   (1e)
                    x
     N_1(x, y, z) ----> N_2(a, b, x)

A case that depends on how priorities are calculated
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

And several cases that may depend on the implementation.
This case depends on how the voting is done.

.. code-block::

   (2a-1)
                   ??
     N_1(x, y, z) ----> N_2(z, y, x)

There may be different ways to prioritize preferences.
One example is simple voting scheme where every node has a priority that corresponds to its position (using zero as the first index), and the publisher breaks ties with its preference.

.. math::

   \text{priority} = \frac{1}{\text{position}+1}

If this is the case, the value of ``priority`` for node ``1``, the priority for ``x``, ``y``, and ``z`` is ``1/1``, ``1/2``, and ``1/3`` respectively.
And for node ``2`` the priority for ``z``, ``y``, and ``x`` is ``1/1``, ``1/2``, and ``1/3`` respectively.
This means that ``x`` and ``z`` have the same priority of ``4/3`` between nodes ``1`` and ``2``, and ``y`` has the same priority of ``1`` between nodes ``1`` and ``2``.
Since it is a tie between ``x`` and ``z``, the agreed upon message type is ``x``, since the publishers preference breaks ties, and the publisher, node ``1`` prefers type ``x``.

.. code-block::

   (2a-2)
                    x
     N_1(x, y, z) ----> N_2(z, y, x)

Publishing to multiple nodes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There are also the cases where there are more than two nodes.

In the following case, ``N_3`` has the limiting supported type, ``y``, so ``N_1`` will publish ``y``, despite the fact that both ``N_1`` and ``N_2`` prefer ``x``.

.. code-block::

   (3a)
                 y
     N_1(x, y) -------> N_2(x, y)
                    |
                    |-> N_3(y)

In the following case, the two nodes receiving data from ``N_1`` both require different message types.
Thus, ``N_1`` will publish two different message types, ``x`` and ``y``.

.. code-block::

   (3b)
                 x
     N_1(x, y) ----> N_2(x)
             |
             |   y
             |-----> N_3(y)

Superposition for negotiating in loops
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In this case, we will use ``??`` to mean that the message type is unknown.
Note that we have two message types potentially coming from node ``1`` since it has two subscribers.

.. code-block::

   (4a-1)
                ??
            |-------------------------
            |                        |
            |   ??              ??   v
     N_1(x, y) ----> N_2(y, z) ----> N_3(y)

In this case, the above system can be thought using superposition, that is, solving the problem in parts.

.. code-block::

   (4a-2)
                 y
     N_2(y, z) ----> N_3(y)

and

.. code-block::

   (4a-3)
                 y
     N_1(x, y) -------> N_2(y, z)
                    |
                    |-> N_3(y)

Thus we get that both node 1 and node 2 will be publishing ``y``.

.. code-block::

   (4a-4)
                   y
               |----------------------
               |                     |
               |                y    v
     N_1(x, y) ----> N_2(y, z) ----> N_3(y)

There is also the case, where the solution by superposition yields two different message types for the subscriber.
This is unfortunate, and could be solved by having the publishing nodes coordinate or by having nodes that delay their revealing their preferences as discussed below.

.. code-block::

   (4b-1)
              ?
         |-------------------------
         |                        |
         |    ?               ?   v
     N_1(x) ----> N_2(z, x) ----> N_3(z, x)

The above system can be decomposed into the following steps.

.. code-block::

   (4b-2)
                 z
     N_2(z, x) ----> N_3(z, x)

and

.. code-block::

   (4b-3)
                 x
     N_1(x) -------> N_2(z, x)
                 |
                 |-> N_3(z, x)

If the publishers in node 1 and 2 were able to coordinate, they would have realized that ``x`` is the only solution that allows node 3 to have one subscriber message type.

.. code-block::

   (4b-4)
               x
            |----------------------
            |                     |
            |                 z   v
     N_1(x) ----> N_2(z, x) ----> N_3(z, x)

Nodes that delay revealing their preferences
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

It may be the case that a node with both publishers and subscribers would like to wait to reveal its subscribers preferences until its publisher knows what message type it will be using.

To discuss this, we'll have to use additional notation.

Let ``N_p([x, y, z], {x: [x, y, z], y: [y, z, x], z: [z, x, y]})`` be a node ``p`` thats publishers and subscribers support ``x``, ``y``, and ``z`` message types, as given by the first argument.
Then let the second argument be a dictionary that maps each message type to an ordered preference.
This dictionary is used to determine the preference of node ``p``'s subscriber.

As a shorthand in figures, we'll define a node that differs its preference beforehand and add an asterisk to separate it from other nodes. For example:

.. code-block::

    N_p*(x, y, z) := N_p([x, y, z], {x: [x, y, z], y: [y, z, x], z: [z, x, y]})

or

.. code-block::

    N_p* := N_p([x, y, z], {x: [x, y, z], y: [y, z, x], z: [z, x, y]})

Also, note that regular nodes with the standard notation (e.g., ``N_n(x, y, z)``, with no ``*``) readily reveal their preferences, which is to say that they don't delay revealing their preferences until their publisher has determined its message type.

.. code-block::

    N_2*(x, y, z) := N_2([x, y, z], {x: [x, y, z], y: [y, z, x], z: [z, x, y]})

   (5a)
                    y                   y
     N_1(x, y, z) ----> N_2*(x, y, z) ----> N_3(y, z, x)

This approach can also be useful in the problems solved above with superposition.
In the case below, node ``2`` will cause node ``1`` wait to pick its preference until it has determined its message type.

.. code-block::

    N_2*(x, y, z) := N_2([x, y, z], {x: [x, y, z], y: [y, z, x], z: [z, x, y]})

   (5b)
                     y
                  |--------------------------
                  |                         |
                  |                     y   v
     N_1(x, y, z) ----> N_2*(x, y, z) ----> N_3(y, z, x)

It is possible with this method to have a deadlock.
In the following case all nodes will delay their preference indefinitely.
In this case, the only way out will be a timeout.

.. code-block::

    N_1* := N_1([x, y, z], {x: [x, y, z], y: [y, z, x], z: [z, x, y]})
    N_2* := N_1*
    N_3* := N_1*

   (5c)

       -- N_3* <--
       |         |
       v         |
     N_1* ----> N_2*

Notice, however, that the deadlock is fixed by one node readily revealing its preferences.

.. code-block::

    N_1* := N_1([x, y, z], {x: [x, y, z], y: [y, z, x], z: [z, x, y]})
    N_2* := N_1*

   (5d)

       -- N_3(x, y, z) <--
     x |                 |
       v    x          x |
     N_1* ----> N_2* -----


Rationale
=========

Having the Publisher Pick the Message Type
------------------------------------------

Consider a network with ``m`` publishers and ``n`` subscribers, where ``m`` and ``n`` are positive integers.
Also imagine that there are at least two publishers that are publishing on the same topic.
In this case, it is possible to have each of these publishers consider the other publishers in their decision of what message type to send.

It is also true that loops in the network may occur.
For example, imagine nodes ``A``, ``B``, and ``C``.
``A`` sends a message to ``B``, and ``B`` sends a message to ``C``.
This gets more complicated if ``A`` also sends a message to ``C``.

In both of the above cases, it is much more challenging to find the best message type than the simple strategy detailed in a previous section.
It was thought that the simpler approach described above in the specifications gets us almost all the way there, while being much simpler to implement.
In addition, if it turns out to be necessary, the simpler approach can always be replaced by a better method for getting the optimal solution in future work.


Using Different Topics or the Same Topic For Different Message Types
--------------------------------------------------------------------

If a publisher can publish ``ARGB888`` or ``YUV420`` images, should the images be published on namespaced topics or to the topic directly?
Specifically, say that it has been negotiated the the publisher should publish ``ARG888`` on the topic ``/image``, should the images be published on ``/image/ARGB888`` or ``/image``?
In either case, the topics should support following remapping rules.
Using ``/image/ARGB888`` removes ambiguity, but could make it hard to work with other nodes that do not negotiate their message types that are also on the network.
It also will be harder to use with remapping rules.
While ``/image`` is cleaner, but may lead to confusion when a single topic is used for multiple message types.
``/image`` also makes it more difficult for the user to use topics published by nodes that do not perform type negotiation, which actually may be desirable: it will reduce the chance that the user builds a pipeline for one message type but then receives another message type on the same topic.

Since the ``<topic>/<message type>`` format removes ambiguity and makes it harder to use negotiated nodes inappropriately, we will use the ``<topic>/<message type>`` format for all topics.


Delaying Revealing Preferences Until the Publisher's Message Type is Known
--------------------------------------------------------------------------

In some cases, it may be desirable for a node that has both publishers and subscribers to delay revealing its preference until the publisher's message type is known.
This may be because data the subscriber receives may be used in the message that is ultimately published.

One danger in this behavior is that there may be a loop in which all nodes are delaying revealing their preferences.
A simple solution and the one proposed is to use a timeout to prevent this from happening.

If there is a case that there is a valid loop, then at least one of the nodes must reveal its preferences.
For this reason, nodes will have the ability to reveal their preferences or to delay revealing them.
For a node to delay revealing its preferences, there is additional configuration that must occur, so the default behavior will be that nodes reveal their preferences readily.


To Take a Centralized or Decentralized Approach
-----------------------------------------------

To come.


Extending Lifecycle Nodes
-------------------------

To come.


Putting this Implementation in ``rclcpp`` or ``rcl``
----------------------------------------------------

To come.


Backwards Compatibility
=======================

The proposed feature adds new functionality while not modifying existing functionality.


Feature Progress
================

To come.


References
==========

To come.


Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End: